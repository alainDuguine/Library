swagger: '2.0'
info:
  version: 1.0.0
  title: Open Library Project
  description: Rest api for Library OpenClassroom Project
tags:
  - name: books
    description: Managing books
  - name: authors
    description: Managing authors
  - name: users
    description: Managing users
  - name: loans
    description: Managing loan
paths:
  /users:
    get:
      tags:
        - users
      summary: Get a list of all users
      description: ''
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: Users found
          schema:
            type: array
            items:
              $ref: '#/definitions/RegisteredUser'
    post:
      tags:
        - users
      summary: Add a new user
      description: ''
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object that needs to be added to the database
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: User email
              password:
                type: string
                description: User password
              firstName:
                type: string
                description: User first name
              lastName:
                type: string
                description: User last name
      responses:
        '201':
          description: User added successfully to database
          schema:
            $ref: '#/definitions/RegisteredUser'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
  /login:
    post:
      tags:
        - users
      summary: Authenticate user
      description: ''
      operationId: login
      consumes:
        - application/json
      parameters:
        - in: body
          name: user credentials
          description: User mail and password
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            required:
              - email
              - password
      responses:
        '200':
          description: Credentials valid
        '400':
          description: Invalid credentials supplied
  '/users/{id}':
    get:
      tags:
        - users
      summary: Get user by Id
      description: ''
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of user to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: User found
          schema:
            $ref: '#/definitions/RegisteredUser'
        '400':
          description: Invalid ID supplied
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete a user by id
      description: ''
      operationId: deleteUser
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User id to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid ID supplied
        '403':
          description: You are not allowed to perform this request
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update a user
      description: ''
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: User id to update
          required: true
          type: integer
          format: int64
        - in: body
          name: user
          description: User object updated
          required: true
          schema:
            $ref: '#/definitions/RegisteredUser'
        - name: Authorization
          in: header
          description: User identification
          required: true
          type: string
      security:
        - basicAuth: []
      responses:
        '201':
          description: User updated successfully
          schema:
            $ref: '#/definitions/RegisteredUser'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
        '404':
          description: User not found
  /users/findByEmail:
    get:
      tags:
        - users
      summary: Get user by email
      description: ''
      operationId: getUserByEmail
      produces:
        - application/json
      parameters:
        - name: email
          in: query
          description: Email of user to return
          required: true
          type: string
      responses:
        '200':
          description: User found
          schema:
            $ref: '#/definitions/RegisteredUser'
        '400':
          description: Invalid email supplied
        '404':
          description: User not found
    delete:
      tags:
        - users
      summary: Delete a user by email
      description: ''
      operationId: deleteUserByEmail
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          description: User email to delete
          required: true
          type: string
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid email supplied
        '403':
          description: You are not allowed to perform this request
        '404':
          description: User not found
  /books:
    get:
      tags:
        - books
      summary: Get a list of all books
      description: ''
      operationId: getBooks
      produces:
        - application/json
      responses:
        '200':
          description: Books found
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
    post:
      tags:
        - books
      summary: Add a new book
      description: ''
      operationId: addBook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: book
          description: Book object that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Book'
      responses:
        '201':
          description: Book added successfully to database
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
  '/books/{id}':
    get:
      tags:
        - books
      summary: Get book by Id
      description: ''
      operationId: getBook
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of book to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Book found
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
    delete:
      tags:
        - books
      summary: Delete a book by id
      description: ''
      operationId: deleteBook
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Book id to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Book successfully deleted
        '400':
          description: Invalid ID supplied
        '403':
          description: You are not allowed to perform this request
        '404':
          description: Book not found
    put:
      tags:
        - books
      summary: Update a book
      description: ''
      operationId: updateBook
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Book id to update
          required: true
          type: integer
          format: int64
        - in: body
          name: book
          description: Book object updated
          required: true
          schema:
            $ref: '#/definitions/Book'
      responses:
        '201':
          description: Book updated successfully
          schema:
            $ref: '#/definitions/Book'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
        '404':
          description: Book not found
  /books/findByTitle:
    get:
      tags:
        - books
      summary: Get list of books by title
      description: ''
      operationId: getBooksByTitle
      produces:
        - application/json
      parameters:
        - name: title
          in: query
          description: Title of book to return
          required: true
          type: string
      responses:
        '200':
          description: Books found
          schema:
            type: array
            items:
              $ref: '#/definitions/Book'
        '400':
          description: Invalid Title supplied
        '404':
          description: Book not found
  '/books/{id}/Copies':
    get:
      tags:
        - books
      summary: Get a list of all book's copies
      description: ''
      operationId: getCopies
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of book to find copies from
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Book's copies found
          schema:
            type: array
            items:
              $ref: '#/definitions/BookCopy'
        '400':
          description: Invalid Id Supplied
        '404':
          description: Book not found
    post:
      tags:
        - books
      summary: Add a new book copy
      description: ''
      operationId: addBookCopy
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of book to find copies from
          required: true
          type: integer
          format: int64
        - name: copy
          in: body
          description: Book copy object that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/BookCopy'
      responses:
        '201':
          description: Book added successfully to database
          schema:
            $ref: '#/definitions/BookCopy'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
  '/books/{bookId}/Copies/{copyId}':
    delete:
      tags:
        - books
      summary: Delete a book copy by id
      description: ''
      operationId: deleteBookCopy
      produces:
        - application/json
      parameters:
        - name: bookId
          in: path
          description: Book id to delete a copy from
          required: true
          type: integer
          format: int64
        - name: copyId
          in: path
          description: BookCopy id to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Book copy successfully deleted
        '400':
          description: Invalid ID supplied
        '403':
          description: You are not allowed to perform this request
        '404':
          description: Book copy not found
    put:
      tags:
        - books
      summary: Update a book copy
      description: ''
      operationId: updateBookCopy
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: bookId
          in: path
          description: Book id to update copy from
          required: true
          type: integer
          format: int64
        - name: copyId
          in: path
          description: BookCopy id to update
          required: true
          type: integer
          format: int64
        - in: body
          name: copy
          description: Book copy object updated
          required: true
          schema:
            $ref: '#/definitions/BookCopy'
      responses:
        '201':
          description: Book Copy updated successfully
          schema:
            $ref: '#/definitions/BookCopy'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
        '404':
          description: Book copy not found
  /authors:
    get:
      tags:
        - authors
      summary: Get a list of all authors
      description: ''
      operationId: getAuthors
      produces:
        - application/json
      responses:
        '200':
          description: Authors found
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
    post:
      tags:
        - authors
      summary: Add a new author
      description: ''
      operationId: addAuthor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: author
          description: Author object that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Author'
      responses:
        '201':
          description: Author added successfully to database
          schema:
            $ref: '#/definitions/Author'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
  '/authors/{id}':
    get:
      tags:
        - authors
      summary: Get author by Id
      description: ''
      operationId: getAuthor
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of author to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Author found
          schema:
            $ref: '#/definitions/Author'
        '400':
          description: Invalid ID supplied
        '404':
          description: Author not found
    delete:
      tags:
        - authors
      summary: Delete an autor by id
      description: ''
      operationId: deleteAuthor
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Author id to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: Author successfully deleted
        '400':
          description: Invalid ID supplied
        '403':
          description: You are not allowed to perform this request
        '404':
          description: Author not found
    put:
      tags:
        - authors
      summary: Update an author
      description: ''
      operationId: updateAuthor
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Author id to update
          required: true
          type: integer
          format: int64
        - in: body
          name: author
          description: Author object updated
          required: true
          schema:
            $ref: '#/definitions/Author'
      responses:
        '201':
          description: Author updated successfully
          schema:
            $ref: '#/definitions/Author'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
        '404':
          description: Author not found
  /authors/findByName:
    get:
      tags:
        - authors
      summary: Get list of authors by name
      description: ''
      operationId: getAuthorsByName
      produces:
        - application/json
      parameters:
        - name: title
          in: query
          description: Name of author to return
          required: true
          type: string
      responses:
        '200':
          description: Authors found
          schema:
            type: array
            items:
              $ref: '#/definitions/Author'
        '400':
          description: Invalid Name supplied
        '404':
          description: Author not found
  /loans:
    get:
      tags:
        - loans
      summary: Get a list of all loans
      description: ''
      operationId: getLoans
      produces:
        - application/json
      responses:
        '200':
          description: Loans found
          schema:
            type: array
            items:
              $ref: '#/definitions/Loan'
    post:
      tags:
        - loans
      summary: Add a new loan
      description: ''
      operationId: addLoan
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: loan
          description: Loan object that needs to be added to the database
          required: true
          schema:
            $ref: '#/definitions/Loan'
      responses:
        '201':
          description: Loan added successfully to database
          schema:
            $ref: '#/definitions/Loan'
        '400':
          description: Parameters are incorrect
        '403':
          description: You are not allowed to perform this request
  /loans/findByStatus:
    get:
      tags:
        - loans
      summary: Find loans by status
      description: ''
      operationId: findLoanByStatus
      produces:
        - application/json
      parameters:
        - name: status
          in: query
          description: Status values as filter in research
          required: true
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - loaned
              - returned
              - prolonged
              - late
              - closed
            default: late
      responses:
        '200':
          description: Loans found
          schema:
            type: array
            items:
              $ref: '#/definitions/Loan'
        '400':
          description: Invalid status value
  '/loans/{id}':
    get:
      tags:
        - loans
      summary: Get loan by Id
      description: ''
      operationId: getLoan
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of loan to return
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Loan found
          schema:
            $ref: '#/definitions/Loan'
        '400':
          description: Invalid ID supplied
        '404':
          description: Loan not found
  '/loans/{id}/history':
    get:
      tags:
        - loans
      summary: Get all loan's history
      description: ''
      operationId: getLoanHistory
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of loan
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Loan found
          schema:
            $ref: '#/definitions/LoanStatus'
        '400':
          description: Invalid ID supplied
        '404':
          description: Loan not found
  '/loans/{id}/extension':
    put:
      tags:
        - loans
      summary: Extend an existing loan
      description: ''
      operationId: extendLoan
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Id of loan
          required: true
          type: integer
          format: int64
        - name: Authorization
          in: header
          description: User identification
          required: true
          type: string
      responses:
        '200':
          description: Loan extended
          schema:
            $ref: '#/definitions/LoanStatus'
        '400':
          description: Invalid ID supplied
        '403':
          description: Loan can't be extended
        '404':
          description: Loan not found
definitions:
  RegisteredUser:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: User Id
      email:
        type: string
        description: User email
      password:
        type: string
        description: User password
      firstName:
        type: string
        description: User first name
      lastName:
        type: string
        description: User last name
      roles:
        type: string
        description: User roles list
  Book:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Book Id
      isbn:
        type: string
        description: Book Isbn
      title:
        type: string
        description: Book title
      authors:
        type: array
        items:
          type: object
          properties:
            firstName:
              type: string
              description: Authors first name
            lastName:
              type: string
              description: Authors last name
  Author:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Author Id
      firstName:
        type: string
        description: Author first name
      lastName:
        type: string
        description: Author last name
      books:
        type: array
        items:
          type: string
          description: Book written by author
  BookCopy:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: BookCopy Id
      barcode:
        type: string
        description: BookCopy barCode
      editor:
        type: string
        description: Editor
      book:
        type: object
        description: Book concerned by the copy
        items:
          $ref: '#/definitions/Book'
  Loan:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Loan Id
      startDate:
        type: string
        description: date of the loaning recording
      endDate:
        type: string
        description: date of the loaning end
      bookCopy:
        type: object
        description: BookCopy concerned by loaning
        items:
          $ref: '#/definitions/BookCopy'
      user:
        type: object
        description: User concerned by loaning
        items:
          $ref: '#/definitions/RegisteredUser'
      statuses:
        type: array
        description: Historical of statuses
        items:
          $ref: '#/definitions/LoanStatus'
  LoanStatus:
    type: object
    properties:
      id:
        type: integer
        format: int64
        description: Loan Id
      status:
        type: string
        description: status designation
      date:
        type: string
        description: date of the event
securityDefinitions:
  basicAuth:
    type: basic
host: virtserver.swaggerhub.com
basePath: /al26/Library/1.0.0
schemes:
  - https
  - http
